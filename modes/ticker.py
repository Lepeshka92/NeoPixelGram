from array import array


_F = b'\x00\x1f\x24\x24\x1f\x00\
\x00\x3f\x29\x29\x26\x00\
\x00\x3f\x29\x29\x16\x00\
\x00\x3f\x20\x20\x20\x00\
\x00\x03\x3e\x22\x3e\x03\
\x00\x3f\x29\x29\x21\x00\
\x00\x37\x08\x3f\x08\x37\
\x00\x12\x21\x29\x16\x00\
\x00\x3f\x02\x04\x08\x3f\
\x00\x3f\x02\x24\x08\x3f\
\x00\x3f\x08\x14\x23\x00\
\x00\x0f\x10\x20\x1f\x00\
\x00\x3f\x10\x08\x10\x3f\
\x00\x3f\x08\x08\x3f\x00\
\x00\x1e\x21\x21\x1e\x00\
\x00\x3f\x20\x20\x3f\x00\
\x00\x3f\x24\x24\x18\x00\
\x00\x1e\x21\x21\x12\x00\
\x00\x20\x20\x3f\x20\x20\
\x00\x39\x05\x05\x3e\x00\
\x00\x18\x24\x3f\x24\x18\
\x00\x37\x08\x08\x37\x00\
\x00\x3e\x02\x02\x3e\x03\
\x00\x38\x04\x04\x3f\x00\
\x00\x3f\x01\x3f\x01\x3f\
\x3e\x02\x3e\x02\x3e\x03\
\x00\x20\x3f\x09\x09\x06\
\x3f\x09\x09\x06\x00\x3f\
\x00\x3f\x09\x09\x06\x00\
\x00\x21\x29\x29\x1e\x00\
\x3f\x08\x1e\x21\x21\x1e\
\x00\x1b\x24\x24\x3f\x00\
\x00\x00\x00\x00\x00\x00\
\x00\x3d\x00\x00\x00\x00\
\x00\x00\x30\x00\x30\x00\
\x00\x14\x3f\x14\x3f\x00\
\x00\x09\x15\x3f\x15\x12\
\x00\x11\x02\x04\x08\x11\
\x00\x00\x00\x00\x00\x00\
\x00\x30\x00\x00\x00\x00\
\x00\x0e\x11\x00\x00\x00\
\x00\x11\x0e\x00\x00\x00\
\x00\x0a\x04\x3f\x04\x0a\
\x00\x04\x3f\x04\x00\x00\
\x00\x00\x04\x05\x00\x00\
\x00\x04\x04\x04\x00\x00\
\x00\x00\x01\x00\x00\x00\
\x00\x01\x02\x04\x08\x00\
\x00\x1e\x25\x29\x1e\x00\
\x00\x01\x08\x10\x3f\x00\
\x00\x13\x25\x25\x19\x00\
\x00\x22\x21\x29\x36\x00\
\x00\x3c\x06\x06\x3f\x00\
\x00\x3a\x29\x29\x26\x00\
\x00\x1e\x25\x25\x12\x00\
\x00\x23\x24\x28\x30\x00\
\x00\x16\x29\x29\x16\x00\
\x00\x12\x29\x29\x1e\x00\
\x00\x00\x0a\x00\x00\x00\
\x00\x01\x0a\x00\x00\x00\
\x00\x04\x0a\x11\x00\x00\
\x00\x0a\x0a\x0a\x00\x00\
\x00\x11\x0a\x04\x00\x00\
\x00\x08\x20\x25\x24\x08\
\x00\x0e\x11\x15\x12\x0e'

class Ticker(object):

    def __init__(self, npm):
        self.fps = 300
        self.npm = npm
        
        self._w = 6
        self._a = array('i')
        self._p = 0
        self._c = (0, 255, 0)

    def run(self, arg):
        p = self._p
        for x in range(self.npm.w):
            if p // self._w > len(self._a) - 1:
                p = 0
            for i in range(self._w):
                if (_F[self._a[p // self._w] + (p % self._w)] >> i) & 1 == 1:
                    self.npm.sxy(x, self.npm.h - 1 - i, self._c)
                else:
                    self.npm.sxy(x, self.npm.h - 1 - i, self.npm.black)
            p = p + 1

        if self._p // self._w > len(self._a) - 1:
            self._p = 0
        else:
            self._p = self._p + 1
        
        self.npm.write()

    def txt(self, t):
        for i in t:
            s = ord(i)
            if s > 1071 and s < 1104:
                self._a.append((s - 1072) * self._w)
            if s > 31 and s < 65:
                self._a.append((s - 32) * self._w + 192)
        self._a.append(192)